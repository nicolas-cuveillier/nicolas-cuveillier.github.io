{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { colorToRgb, getHslFromAnimation } from \"../Utils/ColorUtils\";\nimport { deepExtend, isInArray, itemFromArray } from \"../Utils/Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nconst fixOutMode = data => {\n  if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n    return;\n  }\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    _Particle_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = new ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    const shapeType = particlesOptions.shape.type,\n      reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      const shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n      sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getValue(sizeOptions) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    const sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? 0 : 1;\n          break;\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    const gravityOptions = this.options.move.gravity;\n    this.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    this.shadowColor = colorToRgb(this.options.shadow.color);\n    for (const updater of container.particles.updaters) {\n      if (updater.init) {\n        updater.init(this);\n      }\n    }\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _a;\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n  getFillColor() {\n    var _a, _b;\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const backFactor = this.options.roll.mode === \"both\" ? 2 : 1,\n        backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0,\n        rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n    return color;\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    if (this.unbreakable) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    if (override) {\n      return;\n    }\n    const destroyOptions = this.options.destroy;\n    if (destroyOptions.mode === \"split\") {\n      this.split();\n    }\n  }\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n    this.size.loops = 0;\n  }\n  split() {\n    const splitOptions = this.options.destroy.split;\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value);\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var _a, _b, _c, _d;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n    const canvasSize = container.canvas.size,\n      exactPosition = calcExactPositionOrRandomFromSize({\n        size: canvasSize,\n        position: position\n      }),\n      pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n      radius = this.getRadius(),\n      outModes = this.options.move.outModes,\n      fixHorizontal = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: value => pos.x += value,\n          radius\n        });\n      },\n      fixVertical = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: value => pos.y += value,\n          radius\n        });\n      };\n    fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n    fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n    fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n    fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n    return pos;\n  }\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions,\n      radius = this.getRadius();\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n    const overlapOptions = collisionsOptions.overlap;\n    if (overlapOptions.enable) {\n      return false;\n    }\n    const retries = overlapOptions.retries;\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n    let overlaps = false;\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n    return overlaps;\n  }\n  calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction),\n      res = baseVelocity.copy(),\n      moveOptions = this.options.move,\n      rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n      radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n      range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n    return res;\n  }\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n    if (shapeData) {\n      return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n  loadLife() {\n    const container = this.container,\n      particlesOptions = this.options,\n      lifeOptions = particlesOptions.life,\n      life = {\n        delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: particlesOptions.life.count\n      };\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n    return life;\n  }\n}\n_Particle_engine = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particle_engine","calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","colorToRgb","getHslFromAnimation","deepExtend","isInArray","itemFromArray","ParticlesOptions","Shape","Vector","Vector3d","alterHsl","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","overrideShapeType","shapeOptions","shapeData","loadShapeData","undefined","options","pathDelay","move","path","delay","zIndexValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","min","loops","maxLoops","count","sizeAnimation","status","startValue","Math","random","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","bubble","inRange","initialVelocity","calculateVelocity","copy","moveDecay","decay","gravityOptions","gravity","acceleration","inverse","calcPosition","zLayers","initialPosition","offset","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","plugins","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","shadowColor","shadow","color","updater","updaters","init","particleInit","plugin","particleCreated","isVisible","isInsideCanvas","getRadius","canvasSize","canvas","x","y","height","width","draw","delta","drawParticlePlugin","drawParticle","getPosition","getMass","PI","getFillColor","roll","backColor","alter","backFactor","mode","backSum","rolled","floor","angle","getStrokeColor","strokeColor","destroy","override","particleDestroyed","destroyOptions","split","reset","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","baseVelocity","res","moveOptions","rad","radOffset","range","straight","speed","length","lifeOptions","delayTime","duration","time","WeakMap"],"sources":["/Users/nicolascuveillier/WebSite/portfolio/node_modules/react-tsparticles/node_modules/tsparticles/esm/Core/Particle.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { colorToRgb, getHslFromAnimation } from \"../Utils/ColorUtils\";\nimport { deepExtend, isInArray, itemFromArray } from \"../Utils/Utils\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nconst fixOutMode = (data) => {\n    if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        _Particle_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = new ParticlesOptions();\n        particlesOptions.load(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type, reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getValue(sizeOptions) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const gravityOptions = this.options.move.gravity;\n        this.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        this.shadowColor = colorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.options.roll.mode === \"both\" ? 2 : 1, backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === \"split\") {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move, rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container, particlesOptions = this.options, lifeOptions = particlesOptions.life, life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\n_Particle_engine = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}