{"ast":null,"code":"import { clamp, getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { isInArray } from \"../../Utils/Utils\";\nexport function applyDistance(particle) {\n  var initialPosition = particle.initialPosition;\n  var _getDistances = getDistances(initialPosition, particle.position),\n    dx = _getDistances.dx,\n    dy = _getDistances.dy;\n  var dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy);\n  var hDistance = particle.retina.maxDistance.horizontal;\n  var vDistance = particle.retina.maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\nexport function spin(particle, moveSpeed) {\n  var container = particle.container;\n  if (!particle.spin) {\n    return;\n  }\n  var updateFunc = {\n    x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n    y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n  };\n  particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n  particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n  particle.spin.radius += particle.spin.acceleration;\n  var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n  if (particle.spin.radius > maxCanvasSize / 2) {\n    particle.spin.radius = maxCanvasSize / 2;\n    particle.spin.acceleration *= -1;\n  } else if (particle.spin.radius < 0) {\n    particle.spin.radius = 0;\n    particle.spin.acceleration *= -1;\n  }\n  particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n  var particlesOptions = particle.options;\n  var pathOptions = particlesOptions.move.path;\n  var pathEnabled = pathOptions.enable;\n  if (!pathEnabled) {\n    return;\n  }\n  var container = particle.container;\n  if (particle.lastPathTime <= particle.pathDelay) {\n    particle.lastPathTime += delta.value;\n    return;\n  }\n  var path = container.pathGenerator.generate(particle);\n  particle.velocity.addTo(path);\n  if (pathOptions.clamp) {\n    particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n    particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n  }\n  particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n  var container = particle.container;\n  var options = container.actualOptions;\n  var active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n  if (!active) {\n    return 1;\n  }\n  var mousePos = particle.container.interactivity.mouse.position;\n  if (!mousePos) {\n    return 1;\n  }\n  var particlePos = particle.getPosition();\n  var dist = getDistance(mousePos, particlePos);\n  var radius = container.retina.slowModeRadius;\n  if (dist > radius) {\n    return 1;\n  }\n  var proximityFactor = dist / radius || 0;\n  var slowFactor = options.interactivity.modes.slow.factor;\n  return proximityFactor / slowFactor;\n}","map":{"version":3,"names":["clamp","getDistance","getDistances","isInArray","applyDistance","particle","initialPosition","position","dx","dy","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","spin","moveSpeed","container","updateFunc","direction","cos","sin","center","radius","angle","acceleration","maxCanvasSize","max","canvas","size","width","height","applyPath","delta","particlesOptions","options","pathOptions","move","path","pathEnabled","enable","lastPathTime","pathDelay","value","pathGenerator","generate","addTo","getProximitySpeedFactor","actualOptions","active","interactivity","events","onHover","mode","mousePos","mouse","particlePos","getPosition","dist","slowModeRadius","proximityFactor","slowFactor","modes","slow","factor"],"sources":["/Users/nicolascuveillier/WebSite/nicolas-cuveillier.github.io/node_modules/react-tsparticles/node_modules/tsparticles/esm/Movers/Base/Utils.js"],"sourcesContent":["import { clamp, getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { isInArray } from \"../../Utils/Utils\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.retina.maxDistance.horizontal;\n    const vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    const container = particle.container;\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = container.pathGenerator.generate(particle);\n    particle.velocity.addTo(path);\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    const container = particle.container;\n    const options = container.actualOptions;\n    const active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n    if (!active) {\n        return 1;\n    }\n    const mousePos = particle.container.interactivity.mouse.position;\n    if (!mousePos) {\n        return 1;\n    }\n    const particlePos = particle.getPosition();\n    const dist = getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n    if (dist > radius) {\n        return 1;\n    }\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}